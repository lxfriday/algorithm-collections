# coding: utf8

'''
用filter求素数
计算素数的一个方法是埃氏筛法，它的算法理解起来非常简单：

首先，列出从2开始的所有自然数，构造一个序列：

2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...

取序列的第一个数2，它一定是素数，然后用2把序列的2的倍数筛掉：

3, 5, 7, 9, 11, 13, 15, 17, 19, ...

取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉：

5, 7, 11, 13, 17, 19, ...

取新序列的第一个数5，然后用5把序列的5的倍数筛掉：

7, 11, 13, 17, 19, ...

不断筛下去，就可以得到所有的素数。

用Python来实现这个算法，可以先构造一个从3开始的奇数序列：

'''

# 奇数序列
def _odd_iter():
    n = 1
    while True:
        n = n + 2
        yield n

# 先传入底数，再传入被除数
def _not_divisible(n):
    return lambda x: x % n > 0

# 不断返回素数
def primes():
    yield 2
    it = _odd_iter() # 初始序列
    while True:
        n = next(it) # 返回序列的第一个数
        # 返回的是第n个数的情况下，将该数的所有倍数全部删除
        yield n
        # 将原来已经筛选过的，再次筛选，形成新的序列
        it = filter(_not_divisible(n), it) # 构造新序列

# 打印1000以内的素数:
for n in primes():
    if n < 1000:
        print(n)
    else:
        break
